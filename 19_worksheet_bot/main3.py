import os
import telebot
import settings
from telebot import types


bot = telebot.TeleBot(settings.API_TOKEN)
# –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

user_dct = dict()
status_dct = dict()
status_lst = ["first_name", "last_name", "username", "school", "age"]
translation = {
    "first_name": "–§–∞–º–∏–ª–∏—è",
    "last_name": "–ò–º—è",
    "username": "–ù–∏–∫",
    "age": "–í–æ–∑—Ä–∞—Å—Ç",
    "school": "–®–∫–æ–ª–∞",
}
check = "üî≤‚úÖ"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def send_welcome(user_id):
    is_ready = True
    markup = types.InlineKeyboardMarkup()
    for status in status_lst:
        button = check[int(bool(user_dct[user_id].get(status)))]
        name = f"{button} {translation[status]}"
        markup.add(types.InlineKeyboardButton(name, callback_data=status))
        if user_dct[user_id].get(status) is None:
            is_ready = False
    if is_ready:
        msg = f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!"
        status_dct[user_id] = "ok"
    else:
        msg = f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É"
    bot.send_message(user_id, msg, reply_markup=markup)


@bot.message_handler(commands=["start"])
def commands_start(message):
    from telebot.types import ReplyKeyboardRemove as rk_remove

    user = message.from_user
    user_id = str(user.id)
    user_dct.setdefault(user_id, dict())
    msg = f"–ü—Ä–∏–≤–µ—Ç, —è —ç—Ö–æ-–±–æ—Ç. –ù–µ –ø—Ä–æ—Å—Ç–æ–π, –∞ –æ—á–µ–Ω—å –ª—é–±–æ–ø—ã—Ç–Ω—ã–π!"
    bot.send_message(user_id, msg, reply_markup=rk_remove())
    send_welcome(user_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=["text"])
def echo_all(message):
    user_id = str(message.from_user.id)
    if status_dct.get(user_id) == "ok":
        bot.reply_to(message, message.text)
    else:
        user_dct.setdefault(user_id, dict()).setdefault(status_dct[user_id], None)
        user_dct[user_id][status_dct[user_id]] = message.text
        send_welcome(user_id)


@bot.callback_query_handler(func=lambda callback: True)
def check_callback(callback):
    user_id = str(callback.from_user.id)
    callback_data = callback.data
    status_dct[user_id] = callback_data
    msg = f"–í–≤–µ–¥–∏—Ç–µ `{translation[callback_data]}`"
    bot.send_message(callback.message.chat.id, msg)


if __name__ == "__main__":
    bot.infinity_polling()
